#!/bin/sh

# http://superuser.com/a/232692
modprobe pcspkr

# calc
# Evaluate mathematical expression
calc() {

  # Input to 'bc' must terminate with '\n'
  # http://stackoverflow.com/a/14171828

  # 'awk' sets 'scale' for 'bc', and adds '\n'
  awk 'BEGIN { print "scale = 20" } { print }' | bc -ls | tr -d '\n'
}

# test `printf '%s' '3.25 + 2.25' | calc` = '5.50' && printf 'OK\n' || printf 'FAIL\n'

# fix
# Round number to '$1' decimal digits
fix() {

  awk 'BEGIN { ORS = "" } { printf "%.'$1'f", $0 }'

  # Alternatives:
  #
  # calc | python -c 'print format(round(float(raw_input()), '$d'), ".'$d'f")'
}

# test `printf '%s' '34.5236' | calc | fix 3` = '34.524' && printf 'OK\n' || printf 'FAIL\n'
# test `printf '%s' 'e (1.5 * l (2))' | calc | fix 3` = '2.828' && printf 'OK\n' || printf 'FAIL\n'

# round
# Round number to nearest integer
round() {

  fix 0
}

# test `printf '%s' '-34 - 0.6' | calc | round` = '-35' && printf 'OK\n' || printf 'FAIL\n'
# test `printf '%s' '-34 - 0.4' | calc | round` = '-34' && printf 'OK\n' || printf 'FAIL\n'
# test `printf '%s' '34.6' | round` = '35' && printf 'OK\n' || printf 'FAIL\n'
# test `printf '%s' '34.4' | round` = '34' && printf 'OK\n' || printf 'FAIL\n'

# Base frequency for 'cent' values is 261.625565Hz (middle C).
# https://en.wikipedia.org/wiki/Cent_(music)
cent_base=261.625565
cent_offset=`printf '%s' "l ($cent_base)" | calc`
cent_mult=`printf '%s' "1200 / (l (2))" | calc`

# freq_to_cent
# Convert frequency to cents (relative to $cent_base)
freq_to_cent() {

  awk 'BEGIN { ORS = "" } { print "(l (", $0, ") - '$cent_offset') * '$cent_mult'" }'
}

# test `printf '%s' '500 + 67.8' | freq_to_cent | calc | fix 3` = '1341.455' && printf 'OK\n' || printf 'FAIL\n'
# test `printf '%s' '200' | freq_to_cent | calc | fix 3` = '-465.004' && printf 'OK\n' || printf 'FAIL\n'
# test `printf '%s' $cent_base' / 2' | freq_to_cent | calc | fix 3` = '-1200.000' && printf 'OK\n' || printf 'FAIL\n'

# cent_to_freq
# Convert cents (relative to $cent_base) to frequency
cent_to_freq() {

  awk 'BEGIN { ORS = "" } { print "e (((", $0, ") / '$cent_mult') + '$cent_offset')" }'
}

# test `printf '%s' '500 + 67.8' | freq_to_cent | cent_to_freq | calc | fix 3` = '567.800' && printf 'OK\n' || printf 'FAIL\n'
# test `printf '%s' '200' | freq_to_cent | cent_to_freq | calc | fix 3` = '200.000' && printf 'OK\n' || printf 'FAIL\n'
# test `printf '%s' $cent_base' / 2' | freq_to_cent | cent_to_freq | calc | fix 3` = `printf '%s' $cent_base' / 2' | calc | fix 3` && printf 'OK\n' || printf 'FAIL\n'

# stream
# Print arguments to STDOUT (like 'echo')
stream() {

  printf '%s ' "$@"
}

# test "`stream 100 200 300`" = "100 200 300 " && printf 'OK\n' || printf 'FAIL\n'

# arpeggio
# Generate an arpeggio from a sequence of tones
arpeggio() {

  awk 'BEGIN { ORS = " " } { for (i = 1; i <= NF; i++) print $i, "'$1'", "0" }'
}

# test "`printf '%s' '100 200 300' | arpeggio 50`" = "100 50 0 200 50 0 300 50 0 " && printf 'OK\n' || printf 'FAIL\n'

# reverse
# Reverse all triplets in a sequence
reverse() {

  local i
  local c
  local buff
  local count
  i=
  c=
  buff=
  count=0
  for i in `cat` ; do

    c="$c $i"
    count=`expr $count + 1`

    if test $count = 3 ; then

      buff="$c $buff"
      c=
      count=0
    fi
  done

  stream $buff
}

# test "`stream 100 50 0 200 50 0 300 50 0 | reverse`" = "300 50 0 200 50 0 100 50 0 " && printf 'OK\n' || printf 'FAIL\n'

# repeat
# Repeat a sequence of triplets $1 times
repeat() {

  local i
  local c
  i=$1
  c=`cat`
  while test $i -ge 1 ; do
    printf '%s ' "$c"
    i=`expr $i - 1`
  done
}

# test "`stream 100 200 300 | repeat 3`" = "100 200 300  100 200 300  100 200 300  " && printf 'OK\n' || printf 'FAIL\n'
# test "x`stream 100 200 300 | repeat 0`x" = "xx" && printf 'OK\n' || printf 'FAIL\n'

# add_const
# Add a number to a constant
add_const() {

  awk 'BEGIN { ORS = "" } { print "(", $0, ") + ('$1')" }'
}

# test `printf '%s' '100' | add_const 5 | calc` = "105" && printf 'OK\n' || printf 'FAIL\n'
# test `printf '%s' '100' | add_const -5 | calc` = "95" && printf 'OK\n' || printf 'FAIL\n'

# mult_const
# Multiply a number by a constant
mult_const() {

  awk 'BEGIN { ORS = "" } { print "(", $0, ") * ('$1')" }'
}

# test `printf '%s' '100' | mult_const 5 | calc` = "500" && printf 'OK\n' || printf 'FAIL\n'
# test `printf '%s' '100' | mult_const -5 | calc` = "-500" && printf 'OK\n' || printf 'FAIL\n'

# map_tones
# Apply a transformation to each tone in a sequence
map_tones() {

  local i
  local count
  count=0
  for i in `cat` ; do

    if test $count = 0 ; then
      printf '%s' "$i" | "$@" | calc
      printf ' '
    else
      printf '%s ' "$i"
    fi

    count=`expr $count + 1`
    if test $count = 3 ; then
      count=0
    fi
  done
}

# test "`printf '%s' '100 200 300' | arpeggio 50 | map_tones add_const 30`" = "130 50 0 230 50 0 330 50 0 " && printf 'OK\n' || printf 'FAIL\n'

# map_durations
# Apply a transformation to each duration in a sequence
map_durations() {

  local i
  local count
  count=0
  for i in `cat` ; do

    if test $count = 1 ; then
      printf '%s' "$i" | "$@" | calc
      printf ' '
    else
      printf '%s ' "$i"
    fi

    count=`expr $count + 1`
    if test $count = 3 ; then
      count=0
    fi
  done
}

# test "`printf '%s' '100 200 300' | arpeggio 50 | map_durations add_const 30`" = "100 80 0 200 80 0 300 80 0 " && printf 'OK\n' || printf 'FAIL\n'

# map_delays
# Apply a transformation to each delay in a sequence
map_delays() {

  local i
  local count
  count=0
  for i in `cat` ; do

    if test $count = 2 ; then
      printf '%s' "$i" | "$@" | calc
      printf ' '
    else
      printf '%s ' "$i"
    fi

    count=`expr $count + 1`
    if test $count = 3 ; then
      count=0
    fi
  done
}

# test "`printf '%s' '100 200 300' | arpeggio 50 | map_delays add_const 30`" = "100 50 30 200 50 30 300 50 30 " && printf 'OK\n' || printf 'FAIL\n'

# scale_tempo
# Scale durations and delays by a factor
scale_tempo() {

  map_durations mult_const "$1" | map_delays mult_const "$1"
}

# test "`printf '%s' '100 50 30 200 50 30 300 50 30' | scale_tempo 2`" = "100 100 60 200 100 60 300 100 60 " && printf 'OK\n' || printf 'FAIL\n'

# map
# Apply a transformation to each number in a sequence
map() {

  local i
  for i in `cat` ; do

    stream "$i" | "$@"
    printf ' '
  done
}

gradient() {

  local f0
  local fint
  local t0
  local d
  f0=$1
  fint=$2
  t0=$3
  d=`stream "$t0 / $4" | calc`
  shift 4

  local t
  t=0

  while test `stream "if (($t + $d) <= $t0) 1; if (($t + $d) > $t0) 0;" | calc` = 1 ; do

    # Cents
    stream "$t / $t0" | "$@" | mult_const "$fint" | add_const "$f0" | calc

    # Duration and delay
    printf ' %s 0 ' "$d"

    t=`stream "$t + $d" | calc`
  done
}

# test "`gradient 0 100 1000 5 calc | map round`" = "0 200 0 20 200 0 40 200 0 60 200 0 80 200 0 " && printf 'OK\n' || printf 'FAIL\n'
# test "`gradient 0 -100 1000 5 calc | map round`" = "0 200 0 -20 200 0 -40 200 0 -60 200 0 -80 200 0 " && printf 'OK\n' || printf 'FAIL\n'

# compile
# Convert sets of (cents, duration, delay) into 'beep' arguments
compile() {

  local i
  local count
  local first
  count=0
  first=1
  for i in `cat` ; do

    if test $first = 1 ; then
      first=0
    elif test $count = 0 ; then
      printf '%s' ' -n '
    fi

    if test $count = 0 ; then

      # Tone
      printf '%s' '-f '
      printf '%s' "$i" | cent_to_freq | calc | round

    elif test $count = 1 ; then

      # Duration
      printf '%s' ' -l '
      printf '%s' "$i" | round

    elif test $count = 2 ; then

      # Delay
      if test `stream "$i" | round` -ge 1 ; then
        printf '%s' ' -D '
        printf '%s' "$i" | round
      fi

    fi

    count=`expr $count + 1`
    if test $count = 3 ; then
      count=0
    fi
  done
}

# test "X`printf '%s' '0 50 0 200 50 50 400 50 0' | compile`X" = "X-f 262 -l 50 -n -f 294 -l 50 -D 50 -n -f 330 -l 50X" && printf 'OK\n' || printf 'FAIL\n'

# play
# Play a stream of <cent, duration, delay> triplets with 'beep'
play() {

  # Kill background 'beep' job if we receive an interrupt
  # http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#trap
  trap 'kill -INT $pid ; exit 1' INT TERM

  local i
  local c
  local count
  local pid
  c=
  count=0
  pid=
  for i in `cat` ; do

    c="$c $i"
    count=`expr $count + 1`

    if test $count = 3 ; then

      # Compile triplet
      c=`printf '%s' "$c" | compile`

      # Compilation complete. Wait for background 'beep' to complete, if any.
      wait

      # Run 'beep' in background while we compile the next triplet
      beep $c &
      pid=$!

      c=
      count=0
    fi
  done

  # STDIN is exhausted. Wait for background 'beep' to complete, if any.
  wait
  trap - INT TERM
}
